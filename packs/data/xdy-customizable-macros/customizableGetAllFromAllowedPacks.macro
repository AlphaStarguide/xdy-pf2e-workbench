// Made by esheyw, source: https://discord.com/channels/880968862240239708/1116034857907273832/1164695510158946305
/* eslint-disable */

// types: [all, action, bestiary, campaignFeature, equipment, feat, hazard, spell] (compendium browser divisions + 'all')
//        if you need to find effects like this, too bad I guess
// fields: document fields required to index for provided filter
// filter: a function that takes one argument, returns bool, for .filter()
// strictSourcing: if true, will suppress documents with missing source information, if false they're let through
// fetch: if true will return actual documents, if false, just the compendium indicies
async function getAllFromAllowedPacks({
    type = "equipment",
    fields = [],
    filter = null,
    strictSourcing = true,
    fetch = false
} = {}) {
    const browser = game.pf2e.compendiumBrowser;
    const validTypes = Object.keys(browser.settings);
    validTypes.push("all");
    const aliases = {
        actor: "bestiary",
        npc: "bestiary",
    };

    const originalType = type;
    if (!validTypes.includes(type) && !validTypes.includes(type = aliases[type] ?? "")) {
        ui.notifications.error(`getAllFromLoadedPacks: invalid type ${originalType}`);
        return null;
    }
    if (!Array.isArray(fields) || (fields.length && fields.find(f => typeof f !== "string"))) {
        ui.notifications.error("getAllFromLoadedPacks: fields must be an array of only strings");
        return null;
    }
    if (filter && typeof filter !== "function") {
        ui.notifications.error("getAllFromLoadedPacks: provided filter must be a function");
        return null;
    }

    const packList = type === "all"
         ? Object.values(browser.settings).flatMap(t => Object.entries(t))
         : Object.entries(browser.settings[type]);

    const loadablePacks = packList.filter(([_, p]) => p.load).map(([pack]) => pack);
    const sources = browser.packLoader.sourcesSettings.sources;
    const loadableSources = Object.values(sources)
        .filter(s => s.load)
        .map(s => s.name.slugify({
                strict: true
            }));

    fields.push("system.details.publication",
                "system.publication",
                "system.source",
                "system.details.source");

    let out = [];
    const sourceFilter = (d) => {
        const slug = (d?.system?.details?.publication?.title
             ?? d?.system?.publication?.title
             ?? d?.system?.details?.source?.value
             ?? d?.system?.source?.value
             ?? "").slugify({
            strict: true
        });
        if (!slug)
            return strictSourcing ? false : true;
        return loadableSources.includes(slug);
    }

    for (const packName of loadablePacks) {
        const pack = game.packs.get(packName);
        const initialDocs = await pack.getIndex({
            fields
        });
        const sourcedDocs = initialDocs.filter(sourceFilter);
        const filteredDocs = filter ? sourcedDocs.filter(filter) : sourcedDocs;
        out.push(...filteredDocs)
    }

    if (fetch)
        out = await Promise.all(out.map(async(d) => (await fromUuid(d.uuid))));
    return out;
}

const symonFilter = (t) => t.type === "weapon"
     && t.system.level.value <= actor.level
     && t.system.range === null
     && !t.system.traits.value.includes("magical")
     && !t.system.traits.value.includes("bomb")
     && !t.system.traits.value.includes("vehicular")
     && t.system.potencyRune.value === null

const testFilter = (d) => d.system.traits.value.includes("goblin")

const options = {
    // type: "all",
    fields: [
        "system.details.level",
        "system.traits",
        "system.level",
        "system.traits",
        "system.potencyRune",
        "system.range"
    ],
    filter: testFilter,
    strictSourcing: false,
    // fetch: true
}
console.warn('final out:', await getAllFromAllowedPacks(options));
